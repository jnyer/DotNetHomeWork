<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin-when-crossorigin" />
    <meta name="description" content="翻译自 Steve Gordon 2020年3月30日的文章 《WHAT ARE .NET WORKER SERVICES?》 1 随着 .NET Core 3.0 的发布，ASP.NET 团队引入了" />
    <meta property="og:description" content="翻译自 Steve Gordon 2020年3月30日的文章 《WHAT ARE .NET WORKER SERVICES?》 1 随着 .NET Core 3.0 的发布，ASP.NET 团队引入了" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>.NET 中的 Worker Service 入门介绍 - 技术译民 - 博客园</title>
    <link id="favicon" rel="shortcut icon" href="//common.cnblogs.com/favicon.svg" type="image/svg+xml" />
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=zS6-e1bxywlu3kpHvpr1J6MySwya3ztFtEnS7RYQ0Fk" />
    <link id="MainCss" rel="stylesheet" href="/skins/codinglife/bundle-codinglife.min.css?v=2uJkpdACLVfstRQ7zeCFK19brTwKuDEaNBLgKz9nm3A" />
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/ittranslator/custom.css?v=OKC7RrkX1B1ukVNwlwxopa67rNA=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/codinglife/bundle-codinglife-mobile.min.css?v=DwDRKMd1bmjnJZ4iQqrTCO9QLlYb6OZaUAzHoHIIihg" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/ittranslator/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/ittranslator/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/ittranslator/wlwmanifest.xml" />
    <script>
        var currentBlogId = 612247;
        var currentBlogApp = 'ittranslator';
        var cb_enable_mathjax = true;
        var isLogined = false;
        var isBlogOwner = false;
        var skinName = 'CodingLife';
        var visitorUserId = '';
    </script>
        <script>
            var currentPostDateAdded = '2021-05-06 01:25';
        </script>
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=yJQaJ16S00coMfzvh-NgF2zm2J87f5VfNamFdsnKHrc"></script>
    <script type="text/x-mathjax-config">
        MathJax.Hub.Config({
        tex2jax: { inlineMath: [['$','$'], ['\\(','\\)']], processClass: 'math', processEscapes: true },
        TeX: {
        equationNumbers: { autoNumber: ['AMS'], useLabelIds: true },
        extensions: ['extpfeil.js', 'mediawiki-texvc.js'],
        Macros: {bm: "\\boldsymbol"}
        },
        'HTML-CSS': { linebreaks: { automatic: true } },
        SVG: { linebreaks: { automatic: true } }
        });
    </script>
    <script src="https://mathjax.cnblogs.com/2_7_5/MathJax.js?config=TeX-AMS-MML_HTMLorMML&amp;v=20200504"></script>
    
</head>
<body class="no-navbar">
    <a name="top"></a>
    <div id="top_nav" class="navbar forpc navbar-custom">
        <nav id="nav_main" class="navbar-main">
            <ul id="nav_left" class="navbar-list navbar-left">
                <li class="navbar-branding"><a href="https://www.cnblogs.com/" title="开发者的网上家园"><img src="/images/logo.svg?v=R9M0WmLAIPVydmdzE2keuvnjl-bPR7_35oHqtiBzGsM" alt="博客园Logo" /></a></li>
                <li><a href="/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-sitehome')">首页</a></li>
                <li><a href="https://news.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-news')">新闻</a></li>
                <li><a href="https://q.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-q')">博问</a></li>
                <li><a id="nav_brandzone" href="https://brands.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-brands')">专区</a></li>
                <li><a href="https://ing.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-ing')">闪存</a></li>
                <li><a href="https://edu.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-edu')">班级</a></li>
            </ul>
            <ul id="nav_right" class="navbar-list navbar-right">
                <li>
                    <form id="zzk_search" class="navbar-search" action="https://zzk.cnblogs.com/s" method="get">
                        <input name="w" id="zzk_search_input" placeholder="代码改变世界" type="text" tabindex="3" />
                        <button type="submit" id="zzk_search_button">
                            <img src="/images/aggsite/search.svg" alt="搜索" />
                        </button>
                    </form>
                </li>
                <li id="navbar_login_status" class="navbar-list">
                    <a class="navbar-user-info navbar-blog" href="https://i.cnblogs.com/EditPosts.aspx?opt=1" alt="写随笔" title="写随笔">
                        <img id="new_post_icon" class="navbar-icon" src="/images/aggsite/newpost.svg" alt="写随笔" />
                    </a>
                    <a id="navblog-myblog-icon" class="navbar-user-info navbar-blog" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx" alt="我的博客" title="我的博客">
                        <img id="myblog_icon" class="navbar-icon" src="/images/aggsite/myblog.svg" alt="我的博客" />
                    </a>
                    <a class="navbar-user-info navbar-message navbar-icon-wrapper" href="https://msg.cnblogs.com/" alt="短消息" title="短消息">
                        <img id="msg_icon" class="navbar-icon" src="/images/aggsite/message.svg?v=J0WS2P2iPgaIVgXxcAhliw4AFZIpaTWxtdoNAv9eiCA" alt="短消息" />
                        <span id="msg_count" style="display: none"></span>
                    </a>
                    <div id="user_info" class="navbar-user-info dropdown">
                        <a class="dropdown-button" href="https://home.cnblogs.com/">
                            <img id="user_icon" class="navbar-avatar" src="/images/aggsite/avatar-default.svg" alt="用户头像" />
                        </a>
                        <div class="dropdown-menu">
                            <a id="navblog-myblog-text" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx">我的博客</a>
                            <a href="https://home.cnblogs.com/">我的园子</a>
                            <a href="https://account.cnblogs.com/settings/account">账号设置</a>
                            <a href="javascript:void(0)" id="navbar_lite_mode_toggle" title="简洁模式会使用简洁款皮肤显示所有博客">
    简洁模式 <img id="navbar_lite_mode_on" src="/images/lite-mode-check.svg" class="hide" /><span id="navbar_lite_mode_spinner" class="hide">...</span>
</a>
                            <a href="javascript:void(0)" onclick="account.logout();">退出登录</a>
                        </div>
                    </div>
                    <a class="navbar-anonymous" href="https://account.cnblogs.com/signup/">注册</a>
                    <a class="navbar-anonymous" href="javascript:void(0);" onclick="account.login()">登录</a>
                </li>
            </ul>
        </nav>
    </div>

    
    <!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/ittranslator/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/ittranslator/">『技术译站』</a>
</h1>
<h2>一个技术“译”民的『技术译站』，翻译和分享一些 IT 技术文章，微信公众号：技术译站， 网站：https://ittranslator.cn/</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/ittranslator/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
</li>
<li>
<a id="blog_nav_rss" class="menu" href="javascript:void(0)" data-rss="https://www.cnblogs.com/ittranslator/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			<div id="blog_stats_place_holder"><script>loadBlogStats();</script></div>
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->
<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/ittranslator/p/what-are-dotnet-worker-services.html">
    <span>.NET 中的 Worker Service 入门介绍</span>
    



</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<blockquote>
<p>翻译自 Steve Gordon 2020年3月30日的文章 <a href="https://www.stevejgordon.co.uk/what-are-dotnet-worker-services" target="_blank">《WHAT ARE .NET WORKER SERVICES?》</a> <sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p>
</blockquote>

<p>随着 .NET Core 3.0 的发布，ASP.NET 团队引入了一个新的 <strong>Worker Service</strong> 项目模板，该模板作为 .NET SDK 的一部分发布。在本文中，我将向您介绍这个新模板，以及使用它开发的一些实际的服务示例。</p>

<blockquote>
<p>译者注：<br>
请先完成以下准备工作，以便于您理解本文。<br>
1、下载并安装最新的 .NET SDK：<a href="https://dotnet.microsoft.com/download" target="_blank">https://dotnet.microsoft.com/download</a><br>
2、命令行运行 <code>dotnet new Worker -n "MyService"</code> 命令，创建一个 Worker Service 项目。</p>
</blockquote>
<h2 id="什么是-net-core-worker-service？">什么是 .NET Core Worker Service？</h2>

<p>Worker Service 是使用模板构建的 .NET 项目，该模板提供了一些有用的功能，可以将常规控制台应用程序变得更加强大。Worker Service 运行于宿主(Host)的概念之上，宿主维护应用程序的生命周期。宿主还提供了一些常见的特性，如依赖注入、日志记录和配置。</p>

<p>Worker Service 通常是长时间运行的服务，执行一些规律发生的工作负载。</p>
<h3 id="worker-service-的一些例子">Worker Service 的一些例子</h3>

<ul>
<li>处理来自队列、服务总线或事件流的消息、事件</li>
<li>响应对象、文件存储中的文件更改</li>
<li>聚合数据存储中的数据</li>
<li>丰富数据提取管道中的数据</li>
<li>AI/ML 数据集的格式化和清理</li>
</ul>

<p>还可以开发一个这样的 Worker Service，该服务从头到尾执行一个过程，然后关闭。结合调度程序，便可以支持定期的批处理工作负载。例如，调度程序每隔一小时启动一次服务，完成一些汇总数据的计算，然后关闭。</p>

<p>Worker Service 没有用户界面，也不支持直接的用户交互，它们特别适用于设计微服务架构。在微服务体系结构中，职责通常被划分为不同的、可单独部署的、可伸缩的服务。随着微服务架构的成长和发展，拥有大量的 Worker Service 会变得越来越常见。</p>
<h2 id="worker-service-模板提供了什么？">Worker Service 模板提供了什么？</h2>

<p>完全可以在不使用 Worker Service 模板的情况下开发长时间运行的 Worker Service。在 .NET Core 的早期版本中我是这样做的，使用依赖注入容器手动建立宿主，然后启动我的处理工作负载。</p>

<p>在默认情况下，Worker Service 模板包含了有用的基础组件，比如依赖注入，这样我们就可以集中精力在其上构建业务逻辑。它包含了一个管理应用程序生命周期的宿主。</p>

<p>Worker Service 模板本身是相当基础的，它只包含了三个开箱即用的核心文件。</p>
<h3 id="1-programcs">1. Program.cs</h3>

<p>第一个是 <strong>Program</strong> 类。该类包含 .NET 控制台应用程序所必需的 <code>Main</code> 方法入口点，.NET 运行时期望在启动 .NET 应用程序时在 <em>Program</em> 类中查找此方法。</p>
<pre><code class="language-csharp">public class Program
{
    public static void Main(string[] args)
    {
        CreateHostBuilder(args).Build().Run();
    }

    public static IHostBuilder CreateHostBuilder(string[] args) =&gt;
        Host.CreateDefaultBuilder(args)
            .ConfigureServices((hostContext, services) =&gt;
            {
                services.AddHostedService&lt;Worker&gt;();
            });
}
</code></pre>

<p>在 <em>Program</em> 类中，作为 Worker Service 模板一部分的是 <code>CreateHostBuilder</code> 方法，该方法创建一个 <code>IHostBuilder</code>。<code>IHostBuilder</code> 接口定义了一个类型，该类型使用生成器模式生成 <code>IHost</code> 的实例。此模板通过调用 <em>Host</em> 类中的静态 <code>CreateDefaultBuilder</code> 方法来创建一个新的 <em>HostBuilder</em>。</p>

<p>然后，它使用生成器来配置 <em>IHost</em>，该 <em>IHost</em> 被用于运行 Worker Service 应用程序。宿主提供了依赖注入容器和日志记录等功能，就像我们可以在 ASP.NET Core 应用程序中使用的那样。事实上，从 .NET Core 3.0 开始，ASP.NET Core Web 应用程序和 .NET Core Worker Service 都运行在同一 <em>IHost</em> 上的。</p>

<p>默认情况下，它包含了一个服务注册，稍后我会在本文中介绍，暂时不用担心。</p>

<p>从 <code>Main</code> 方法中调用 <code>CreateDefaultBuilder</code> 方法，将构建并立即运行宿主。当 .NET 运行时调用 <code>Main</code> 方法时，应用程序启动，宿主将保持运行，监听标准的关闭信号（例如按下 <code>CTRL+C</code> 键）。</p>
<h3 id="2-appsettingsjson">2. appsettings.json</h3>

<p>如果您以前使用过 ASP.NET Core，将会非常熟悉 <em>appsettings.json</em> 文件，它是应用程序配置的常见来源之一。宿主被设计为，当启动应用程序时，使用任意已注册的配置提供程序从多个来源加载应用程序配置。其中一种提供程序是从 <em>appsettings.json</em> 加载配置，该文件内容由 JSON 组成，其结构包含表示应用程序配置的键和值。这些值可以随意地定义在对相关配置按逻辑分组成的片段（Sections）内。</p>

<p>在 Worker Service 中，启动时会检查相同的配置源（包括此 <em>appsettings.json</em> 文件和环境变量），并从不同的源构建最终的配置。默认情况下会加载多种默认的提供程序，因此也会加载多种源。如果需要，您也可以自定义宿主用来加载配置数据的提供程序。</p>
<pre><code class="language-json">{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft": "Warning",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  }
}
</code></pre>

<p>模板中的默认 <em>appsettings</em> 文件中包含日志记录库的配置设置项，默认对 Worker Service 可用。这里的配置是为某些日志记录上下文设置记录级别的。</p>
<h3 id="3-workercs">3. Worker.cs</h3>

<p><em>Worker</em> 是一个您在默认的 ASP.NET Core 项目模板中见不到的新类。它是托管服务与宿主相结合的魔力所在，提供了 Worker Service 的基础。</p>

<p>让我们来看一下它的代码：</p>
<pre><code class="language-csharp">public class Worker : BackgroundService
{
    private readonly ILogger&lt;Worker&gt; _logger;

    public Worker(ILogger&lt;Worker&gt; logger)
    {
        _logger = logger;
    }

    protected override async Task ExecuteAsync(CancellationToken stoppingToken)
    {
        while (!stoppingToken.IsCancellationRequested)
        {
            _logger.LogInformation("Worker running at: {time}", DateTimeOffset.Now);
            await Task.Delay(1000, stoppingToken);
        }
    }
}
</code></pre>

<p>此类从 <em>BackgroundService</em> 抽象基类派生。<em>BackgroundService</em> 类实现了一个名为 <em>IHostedService</em> 的接口。</p>

<p><em>BackgroundService</em> 包含一个名为 <code>ExecuteAsync</code> 的抽象方法，我们必须在子类中重写该方法，就像 Worker Service 模板中提供的 <em>Worker</em> 类中所做的那样。<code>ExecuteAsync</code> 方法返回一个 <em>Task</em>，在 <em>BackgroundService</em> 内部，期望此 <em>Task</em> 是一些长时间运行的工作负载。该 <em>Task</em> 会被启动并在后台运行。</p>

<p>在内部，宿主将启动 <em>IHostedService</em> 的所有注册实现（包括从 <em>BackgroundService</em> 抽象类派生的类型）。请记住，<em>BackgroundService</em> 为我们实现了 <em>IHostedService</em>。</p>
<h3 id="4-如何注册托管服务ihostedservice？">4. 如何注册托管服务(IHostedService)？</h3>

<p>下一个显而易见的问题是，如何注册 <em>IHostedService</em> ？ 如果我们返回到 <em>Program.cs</em> 的代码，我们将会找到答案：</p>
<pre><code class="language-csharp">public static IHostBuilder CreateHostBuilder(string[] args) =&gt;
    Host.CreateDefaultBuilder(args)
        .ConfigureServices((hostContext, services) =&gt;
        {
            services.AddHostedService&lt;Worker&gt;();
        });
</code></pre>

<p>在 <code>ConfigureServices</code> 方法中，可以向依赖注入容器注册类型。<code>AddHostedService</code> 是为 <em>IServiceCollection</em> 定义的一个扩展方法，它允许我们注册一个实现了 <em>IHostedService</em> 的类。</p>

<p>该模板中已将 <em>Worker</em> 类注册为托管服务。</p>
<p>在启动时，宿主将找到已注册的 <em>IHostedService</em> 的所有实例，并按顺序启动它们，此时，它们的长时间运行的工作负载会作为后台任务来运行。</p>
<h2 id="为什么要构建-net-core-worker-service？">为什么要构建 .NET Core Worker Service？</h2>


<p>简单的答案是——何时以及是否需要它们！如果您需要开发一个微服务，它没有用户界面，并执行长时间运行的工作，那么 Worker Service 很可能是一个好的选择。</p>

<p>请记住，Worker Service 的底层只是一个控制台应用程序。该控制台应用程序使用宿主将应用程序转换为运行的服务，直到收到停止的信号。宿主带来了您可能已经熟悉的一些特性，比如依赖关系注入。使用和 ASP.NET Core 中可用的相同的日志记录和配置扩展，使得开发可记录日志信息且需要一些配置的 Worker Service 变得相当轻松。当构建运行在云上的 Worker Service 时，几乎总会存在这种需求。例如，您可能需要为与您的 Worker Service 相交互的任何外部服务提供配置（比如一个队列 URL）。</p>

<p>Worker Service 可用于从现有的 ASP.NET Core 应用程序提取职责，设计新的基于 .NET Core 的微服务。</p>
<h2 id="总结">总结</h2>

<p>在本文中，我介绍了 Worker Service 项目模板，以及它的一些潜在用例。我们探索了使用 Worker Service 模板创建的新项目中所包含的三个默认文件。</p>
<h3 id="worker-service-模板包含哪些文件？">Worker Service 模板包含哪些文件？</h3>

<ul>
<li><strong>Program.cs</strong>： 控制台应用程序的入口点，创建并运行宿主以管理应用程序生命周期并生成一个长期运行的服务。</li>
<li><strong>appsettings.json</strong>：一个提供应用程序配置值的 JSON 文件。</li>
<li><strong>Worker.cs</strong>：派生自 <em>BackgroundService</em> 基类，用于定义作为后台任务执行的长时间运行的工作负载。</li>
</ul>
<h3 id="worker-service-是什么？">Worker Service 是什么？</h3>

<ul>
<li>不需要用户交互的应用程序。</li>
<li>使用宿主来维护控制台应用程序的生命周期，直到宿主收到关闭的信号。将控制台应用程序转换为长时间运行的服务。</li>
<li>包含和 ASP.NET Core 相同的功能，如依赖注入、日志记录和配置。</li>
<li>执行定期和长时间运行的工作负载。</li>
</ul>
<br>
<blockquote>
<p>作者 ： Steve Gordon<br>
译者 ： 技术译民<br>
出品 ： <a href="https://ittranslator.cn/" target="_blank">技术译站</a><br>
链接 ： <a href="https://www.stevejgordon.co.uk/what-are-dotnet-worker-services" target="_blank">英文原文</a></p>
</blockquote>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p><a href="https://www.stevejgordon.co.uk/what-are-dotnet-worker-services" target="_blank">https://www.stevejgordon.co.uk/what-are-dotnet-worker-services</a> WHAT ARE .NET WORKER SERVICES? <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>

</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2021-05-06 13:25</span>&nbsp;
<a href="https://www.cnblogs.com/ittranslator/">技术译民</a>&nbsp;
阅读(<span id="post_view_count">177</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=14733589" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(14733589);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/10.3.1/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 612247, cb_blogApp = 'ittranslator', cb_blogUserGuid = '35140cf4-b33e-4987-667d-08d815ea1ad4';
    var cb_entryId = 14733589, cb_entryCreatedDate = '2021-05-06 13:25', cb_postType = 1;
    updatePostStats(
        [cb_entryId],
        function(id, count) { $("#post_view_count").text(count) },
        function(id, count) { $("#post_comment_count").text(count) })
    zoomManager.apply("#cnblogs_post_body img:not(.code_img_closed):not(.code_img_opened)");
</script>
<a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <div id="cnblogs_c1" class="under-post-card">
        <div id='div-gpt-ad-1592365906576-0' style='width: 300px; height: 250px;'></div>
    </div>
    <div id="under_post_card1"></div>
    <div id="cnblogs_c2" class="under-post-card">
        <div id='div-gpt-ad-1592366332455-0' style='width: 468px; height: 60px;'></div>
    </div>
    <div id="under_post_card2"></div>
    <div id="HistoryToday" class="under-post-card"></div>
    <script type="text/javascript">
       var commentManager = new blogCommentManager();
       commentManager.renderComments(0);
       fixPostBody();
       deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);       deliverT2();
       deliverC1C2();
       loadNewsAndKb();
       loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);       LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
       GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
       loadOptUnderPost();
       GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>

	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->
	<div id="sideBar">
		<div id="sideBarMain">
			<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>
<div id="sidebar_c3"></div>
			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2021 技术译民
<br /><span id="poweredby">Powered by .NET 5.0 on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    

    <input type="hidden" id="antiforgery_token" value="CfDJ8L-rpLgFVEJMgssCVvNUAjsgaIAjA3acp8Gt1xU5aDOeGYI-qrHCLdCBFShCuo6vTK9SKSW-38JebkoRfaJCridjip-HGz2IzO6OKc7HIUsnBjyqY1mA5yrvOVlMBi7Ym4_NAAmrsN3ff9b7Kw0zzds" />
</body>
</html>
