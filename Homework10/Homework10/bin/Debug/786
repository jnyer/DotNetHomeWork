<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin-when-crossorigin" />
    
    
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>跳跃的键盘手 - 博客园</title>
    <link id="favicon" rel="shortcut icon" href="//common.cnblogs.com/favicon.svg" type="image/svg+xml" />
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=zS6-e1bxywlu3kpHvpr1J6MySwya3ztFtEnS7RYQ0Fk" />
    <link id="MainCss" rel="stylesheet" href="/skins/codinglife/bundle-codinglife.min.css?v=2uJkpdACLVfstRQ7zeCFK19brTwKuDEaNBLgKz9nm3A" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/codinglife/bundle-codinglife-mobile.min.css?v=DwDRKMd1bmjnJZ4iQqrTCO9QLlYb6OZaUAzHoHIIihg" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/chenxf1117/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/chenxf1117/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/chenxf1117/wlwmanifest.xml" />
    <script>
        var currentBlogId = 588808;
        var currentBlogApp = 'chenxf1117';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var isBlogOwner = false;
        var skinName = 'CodingLife';
        var visitorUserId = '';
    </script>
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=yJQaJ16S00coMfzvh-NgF2zm2J87f5VfNamFdsnKHrc"></script>
    
    
    
</head>
<body class="has-navbar">
    <a name="top"></a>
    <div id="top_nav" class="navbar forpc">
        <nav id="nav_main" class="navbar-main">
            <ul id="nav_left" class="navbar-list navbar-left">
                <li class="navbar-branding"><a href="https://www.cnblogs.com/" title="开发者的网上家园"><img src="/images/logo.svg?v=R9M0WmLAIPVydmdzE2keuvnjl-bPR7_35oHqtiBzGsM" alt="博客园Logo" /></a></li>
                <li><a href="/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-sitehome')">首页</a></li>
                <li><a href="https://news.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-news')">新闻</a></li>
                <li><a href="https://q.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-q')">博问</a></li>
                <li><a id="nav_brandzone" href="https://brands.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-brands')">专区</a></li>
                <li><a href="https://ing.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-ing')">闪存</a></li>
                <li><a href="https://edu.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-edu')">班级</a></li>
            </ul>
            <ul id="nav_right" class="navbar-list navbar-right">
                <li>
                    <form id="zzk_search" class="navbar-search" action="https://zzk.cnblogs.com/s" method="get">
                        <input name="w" id="zzk_search_input" placeholder="代码改变世界" type="text" tabindex="3" />
                        <button type="submit" id="zzk_search_button">
                            <img src="/images/aggsite/search.svg" alt="搜索" />
                        </button>
                    </form>
                </li>
                <li id="navbar_login_status" class="navbar-list">
                    <a class="navbar-user-info navbar-blog" href="https://i.cnblogs.com/EditPosts.aspx?opt=1" alt="写随笔" title="写随笔">
                        <img id="new_post_icon" class="navbar-icon" src="/images/aggsite/newpost.svg" alt="写随笔" />
                    </a>
                    <a id="navblog-myblog-icon" class="navbar-user-info navbar-blog" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx" alt="我的博客" title="我的博客">
                        <img id="myblog_icon" class="navbar-icon" src="/images/aggsite/myblog.svg" alt="我的博客" />
                    </a>
                    <a class="navbar-user-info navbar-message navbar-icon-wrapper" href="https://msg.cnblogs.com/" alt="短消息" title="短消息">
                        <img id="msg_icon" class="navbar-icon" src="/images/aggsite/message.svg?v=J0WS2P2iPgaIVgXxcAhliw4AFZIpaTWxtdoNAv9eiCA" alt="短消息" />
                        <span id="msg_count" style="display: none"></span>
                    </a>
                    <div id="user_info" class="navbar-user-info dropdown">
                        <a class="dropdown-button" href="https://home.cnblogs.com/">
                            <img id="user_icon" class="navbar-avatar" src="/images/aggsite/avatar-default.svg" alt="用户头像" />
                        </a>
                        <div class="dropdown-menu">
                            <a id="navblog-myblog-text" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx">我的博客</a>
                            <a href="https://home.cnblogs.com/">我的园子</a>
                            <a href="https://account.cnblogs.com/settings/account">账号设置</a>
                            <a href="javascript:void(0)" id="navbar_lite_mode_toggle" title="简洁模式会使用简洁款皮肤显示所有博客">
    简洁模式 <img id="navbar_lite_mode_on" src="/images/lite-mode-check.svg" class="hide" /><span id="navbar_lite_mode_spinner" class="hide">...</span>
</a>
                            <a href="javascript:void(0)" onclick="account.logout();">退出登录</a>
                        </div>
                    </div>
                    <a class="navbar-anonymous" href="https://account.cnblogs.com/signup/">注册</a>
                    <a class="navbar-anonymous" href="javascript:void(0);" onclick="account.login()">登录</a>
                </li>
            </ul>
        </nav>
    </div>

    
    <!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/chenxf1117/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/chenxf1117/">跳跃的键盘手</a>
</h1>
<h2></h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/chenxf1117/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E8%B7%B3%E8%B7%83%E7%9A%84%E9%94%AE%E7%9B%98%E6%89%8B">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="javascript:void(0)" data-rss="https://www.cnblogs.com/chenxf1117/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			<div id="blog_stats_place_holder"><script>loadBlogStats();</script></div>
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->
<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		





		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/chenxf1117/archive/2021/05/06.html">2021年5月6日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/chenxf1117/p/14735393.html">
    <span>
            <span>[置顶]</span>
        简单理解IOC控制反转和DI依赖注入
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：用过.net core框架的同学都知道，框架默认支持“构造函数”注入引用对象的方式。使用.net core框架也有一段时间了，最近去了解了一下到底什么是“依赖注入”，而往往谈到依赖注入，必然绕不开“控制反转”。 网上对它们也是众说纷纭，今天基于自己的理解，和大家简单交流下。 “控制反转”（Inver        <a href="https://www.cnblogs.com/chenxf1117/p/14735393.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2021-05-06 15:33
跳跃的键盘手
<span data-post-id="14735393" class="post-view-count">阅读(8)</span> 
<span data-post-id="14735393" class="post-comment-count">评论(0)</span> 
<span data-post-id="14735393" class="post-digg-count">推荐(0)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=14735393" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/chenxf1117/archive/2021/03/25.html">2021年3月25日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/chenxf1117/p/14558510.html">
    <span>
            <span>[置顶]</span>
        深入了解身份认证和授权机制，看看API请求到底发生了什么？
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：前段时间写了一篇基于.NetCore环境使用IdentityServer4为API接口鉴权的文章，更多的是从快速上手的角度描述了IdentityServer4的使用。后续使用过程中，自己有了一些其他想法和困惑，于是便进行一番探索，在这里记录分享一下。 本文主要和大家认识下Client获取到Token        <a href="https://www.cnblogs.com/chenxf1117/p/14558510.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2021-03-25 13:10
跳跃的键盘手
<span data-post-id="14558510" class="post-view-count">阅读(92)</span> 
<span data-post-id="14558510" class="post-comment-count">评论(0)</span> 
<span data-post-id="14558510" class="post-digg-count">推荐(1)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=14558510" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/chenxf1117/archive/2021/02/26.html">2021年2月26日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/chenxf1117/p/14416365.html">
    <span>
            <span>[置顶]</span>
        资源授权？对OAuth2.0的一次重新认识的过程
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：什么是OAuth？ OAuth一个开放的授权标准，允许用户在不提供关键信息（如账号，密码）给第三方应用的前提下，让第三方应用去访问用户在某网站上的资源（如头像，用户昵称等）。 OAuth分为OAuth1.0和OAuth2.0两个版本，后来随着OAuth2.0被使用的越来越广泛，OAuth1.0逐渐退        <a href="https://www.cnblogs.com/chenxf1117/p/14416365.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2021-02-26 16:05
跳跃的键盘手
<span data-post-id="14416365" class="post-view-count">阅读(414)</span> 
<span data-post-id="14416365" class="post-comment-count">评论(2)</span> 
<span data-post-id="14416365" class="post-digg-count">推荐(3)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=14416365" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/chenxf1117/archive/2021/02/08.html">2021年2月8日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/chenxf1117/p/14378153.html">
    <span>
            <span>[置顶]</span>
        .NetCore快速上手Consul，留给自己一点思考的空间
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：互联网热潮下，“微服务”技术架构成为了一种高大上的技术，其顾名思义就是将传统的大的业务服务拆分成独立的小服务，当拆分的服务慢慢多起来的时候，我们会发现服务地址很难管理，传统的方式一般会通过配置文件或者数据库存储，这种手动的维护的方式显然不够灵活，如果某个服务挂了，系统得不到及时的通知，只能等维护人员        <a href="https://www.cnblogs.com/chenxf1117/p/14378153.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2021-02-08 13:54
跳跃的键盘手
<span data-post-id="14378153" class="post-view-count">阅读(485)</span> 
<span data-post-id="14378153" class="post-comment-count">评论(0)</span> 
<span data-post-id="14378153" class="post-digg-count">推荐(3)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=14378153" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/chenxf1117/archive/2021/01/13.html">2021年1月13日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/chenxf1117/p/14268707.html">
    <span>
            <span>[置顶]</span>
        值得推荐的C#不同版本语言特性
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：C#语言在不断地版本升级中，为我们提供了很多新的语言特性。其中，有很多使用的语言特性，我觉得在实际开发中用起来很方便，能够简化我们的代码，增强可读性，提高开发效率。 小编不才，在这里给大家整理了一些实际开发中用起来感觉不错的C#语言特性。 C# 3.01.类型推断 var在申明变量的时候，我们可以不        <a href="https://www.cnblogs.com/chenxf1117/p/14268707.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2021-01-13 15:34
跳跃的键盘手
<span data-post-id="14268707" class="post-view-count">阅读(646)</span> 
<span data-post-id="14268707" class="post-comment-count">评论(0)</span> 
<span data-post-id="14268707" class="post-digg-count">推荐(9)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=14268707" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/chenxf1117/archive/2020/12/08.html">2020年12月8日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/chenxf1117/p/14105319.html">
    <span>
            <span>[置顶]</span>
        C#中的Action和Func委托
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：前言 最近在阅读某开源框架源码的时候，发现作者在其中运用了很多Action委托和Func委托，虽然我之前在项目中也有一些对委托的实操，但还是免不了长时间的不用，当初消化的一些委托基础都遗忘了。。。索性，趁热打铁，借助这次分享的机会，也帮自己重新巩固下.Net中关于委托的一些基础用法。 直奔主题 从.        <a href="https://www.cnblogs.com/chenxf1117/p/14105319.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-12-08 19:59
跳跃的键盘手
<span data-post-id="14105319" class="post-view-count">阅读(438)</span> 
<span data-post-id="14105319" class="post-comment-count">评论(2)</span> 
<span data-post-id="14105319" class="post-digg-count">推荐(2)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=14105319" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/chenxf1117/archive/2020/12/07.html">2020年12月7日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/chenxf1117/p/14098260.html">
    <span>
            <span>[置顶]</span>
        Asp.NetCore之AutoMapper进阶篇
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：应用场景 在上一篇文章——Asp.NetCore之AutoMapper基础篇中我们简单介绍了一些AutoMapper的基础用法以及如何在.NetCore中实现快速开发。我相信用过AutoMapper实现模型映射之后，许多人会和我当初一样有一种淡淡的忧愁，每次实现自定义映射都需要手写映射规则，形如：         <a href="https://www.cnblogs.com/chenxf1117/p/14098260.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-12-07 19:58
跳跃的键盘手
<span data-post-id="14098260" class="post-view-count">阅读(566)</span> 
<span data-post-id="14098260" class="post-comment-count">评论(2)</span> 
<span data-post-id="14098260" class="post-digg-count">推荐(6)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=14098260" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/chenxf1117/archive/2020/12/03.html">2020年12月3日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/chenxf1117/p/14069111.html">
    <span>
            <span>[置顶]</span>
        Asp.NetCore之AutoMapper基础篇
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：应用场景 现在由于前后端技术的分离，后端程序员在使用ORM框架开发后台API接口的时候，往往会将数据库的“数据模型”直接提供给前端。而大多数时候，可能这些数据并不能够满足前端展示的需求，有时候可能需要在“数据模型”的基础上，加几个字段或者改几个字段展示名称或者字段展示风格，以满足前端“视图模型”的需        <a href="https://www.cnblogs.com/chenxf1117/p/14069111.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-12-03 19:51
跳跃的键盘手
<span data-post-id="14069111" class="post-view-count">阅读(528)</span> 
<span data-post-id="14069111" class="post-comment-count">评论(1)</span> 
<span data-post-id="14069111" class="post-digg-count">推荐(5)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=14069111" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/chenxf1117/archive/2020/10/22.html">2020年10月22日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/chenxf1117/p/13853651.html">
    <span>
            <span>[置顶]</span>
        Docker结合.Net Core初步使用
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：Docker是一项比较流行的容器化技术，可以让开发者将应用以及应用依赖的环境，依赖包一起打包到容器中，然后部署容器到生产环境就可以了，解决了应用程序部署到不同服务器环境带来的问题（很多开发人员都遇到过应用程序在自己本地服务器跑的好好的，部署到生产环境就运行不起来，各种奇葩的异常），实现了“一次构建，        <a href="https://www.cnblogs.com/chenxf1117/p/13853651.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-10-22 17:15
跳跃的键盘手
<span data-post-id="13853651" class="post-view-count">阅读(799)</span> 
<span data-post-id="13853651" class="post-comment-count">评论(0)</span> 
<span data-post-id="13853651" class="post-digg-count">推荐(7)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=13853651" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/chenxf1117/archive/2020/10/12.html">2020年10月12日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/chenxf1117/p/13750784.html">
    <span>
            <span>[置顶]</span>
        EntityFramwork基础用法
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：一、EntityFramework(简称“EF”)是什么？ 在.NET3.5之前，我们经常编写ADO.NET代码或通过封装好的数据库访问层来与数据库进行交互，进行CRUD操作。这种模式下，我们往往需要手写大量的SQL语句，不但麻烦而且容易出错。在这种背景下，后来微软发布了EntityFramewor        <a href="https://www.cnblogs.com/chenxf1117/p/13750784.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-10-12 17:01
跳跃的键盘手
<span data-post-id="13750784" class="post-view-count">阅读(118)</span> 
<span data-post-id="13750784" class="post-comment-count">评论(0)</span> 
<span data-post-id="13750784" class="post-digg-count">推荐(1)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=13750784" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/chenxf1117/archive/2020/09/08.html">2020年9月8日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/chenxf1117/p/13594405.html">
    <span>
            <span>[置顶]</span>
        简单说说TCP三次握手、四次挥手机制
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：1.什么是TCP TCP全称Transmission Control Protocol（传输控制协议），是一种面向连接的、可靠的、基于字节流的传输层通信协议。是为了在不可靠的互联网络上提供可靠的端到端字节流而专门设计的一个传输协议。 关键信息： 1）面向连接 2）可靠的 3）基于字节流 4）传输层协        <a href="https://www.cnblogs.com/chenxf1117/p/13594405.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-09-08 15:39
跳跃的键盘手
<span data-post-id="13594405" class="post-view-count">阅读(470)</span> 
<span data-post-id="13594405" class="post-comment-count">评论(0)</span> 
<span data-post-id="13594405" class="post-digg-count">推荐(2)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=13594405" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/chenxf1117/archive/2020/08/21.html">2020年8月21日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/chenxf1117/p/13523533.html">
    <span>
            <span>[置顶]</span>
        ASP.Net中的async+await异步编程
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：在.NET Framework4.5框架、C#5.0语法中，通过async和await两个关键字，引入了一种新的基于任务的异步编程模型（TAP）。在这种方式下，可以通过类似同步方式编写异步代码，极大简化了异步编程模型。 用法： public async Task&lt;int&gt; GetDotNetCoun        <a href="https://www.cnblogs.com/chenxf1117/p/13523533.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-08-21 13:57
跳跃的键盘手
<span data-post-id="13523533" class="post-view-count">阅读(1028)</span> 
<span data-post-id="13523533" class="post-comment-count">评论(4)</span> 
<span data-post-id="13523533" class="post-digg-count">推荐(12)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=13523533" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/chenxf1117/archive/2020/06/12.html">2020年6月12日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/chenxf1117/p/12970731.html">
    <span>
            <span>[置顶]</span>
        Asp.Net Core入门之自定义服务注册
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：谈到服务注册，首先我们先了解一下服务注册时使用的三种方式，也代表了不同的服务生命周期： 1 AddTransient 2 AddScoped 3 AddSingleton AddSingleton生命周期最长，其生命周期范围描述为：从应用程序启动到应用程序结束。在第一次请求时会创建一个实例，之后的每        <a href="https://www.cnblogs.com/chenxf1117/p/12970731.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-06-12 09:22
跳跃的键盘手
<span data-post-id="12970731" class="post-view-count">阅读(888)</span> 
<span data-post-id="12970731" class="post-comment-count">评论(2)</span> 
<span data-post-id="12970731" class="post-digg-count">推荐(5)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12970731" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/chenxf1117/archive/2020/05/11.html">2020年5月11日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/chenxf1117/p/12572181.html">
    <span>
            <span>[置顶]</span>
        ASP.Net Core中使用Swagger
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：我们先简单介绍下什么是Swagger，主要是用来干嘛？？ 在Swagger诞生之前，我们通常在开发接口的过程中，需要前后端共同维护一个接口文档，然后大家按照接口文档的规范进行对接。接口文档俨然成了接口开发过程中不可或缺的一部分，然而对于大部分喜欢敲代码的同志们来说，写文档简直头疼，并且一般项目后期往        <a href="https://www.cnblogs.com/chenxf1117/p/12572181.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-05-11 15:59
跳跃的键盘手
<span data-post-id="12572181" class="post-view-count">阅读(204)</span> 
<span data-post-id="12572181" class="post-comment-count">评论(0)</span> 
<span data-post-id="12572181" class="post-digg-count">推荐(0)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12572181" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/chenxf1117/archive/2020/03/26.html">2020年3月26日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/chenxf1117/p/12552204.html">
    <span>
            <span>[置顶]</span>
        SqlServer同义词
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：最近在项目中遇到跨库操作具有相同表结构的数据表的问题。（A库中的数据表a和B库中的数据表b，两者表结构相同） 跨库操作中我们一般是为了实现不同数据库中表字段信息，字段状态等实时同步，可能很多人会想到使用触发器或者同步服务的方式，实现两个库中数据表的信息实时同步。 最近接触到了SqlServer自带的        <a href="https://www.cnblogs.com/chenxf1117/p/12552204.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-03-26 17:10
跳跃的键盘手
<span data-post-id="12552204" class="post-view-count">阅读(439)</span> 
<span data-post-id="12552204" class="post-comment-count">评论(0)</span> 
<span data-post-id="12552204" class="post-digg-count">推荐(1)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12552204" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
            <div class="postSeparator"></div>
        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/chenxf1117/p/12551633.html">
    <span>
            <span>[置顶]</span>
        Topshelf+Quartz3.0基于控制台应用程序快速开发可调度windows服务
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：1.TopShelf TopShelf是一个开源的跨平台的宿主服务框架。可通过.Net Core/.Net Framwork控制台应用程序快速开发windows服务，更加便于服务调试。 本文基于.Net Core2.2快速开发windows服务 首先，我们创建一个控制台应用程序 然后添加Topshe        <a href="https://www.cnblogs.com/chenxf1117/p/12551633.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-03-26 09:09
跳跃的键盘手
<span data-post-id="12551633" class="post-view-count">阅读(749)</span> 
<span data-post-id="12551633" class="post-comment-count">评论(1)</span> 
<span data-post-id="12551633" class="post-digg-count">推荐(4)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12551633" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/chenxf1117/archive/2020/03/25.html">2020年3月25日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/chenxf1117/p/12542479.html">
    <span>
            <span>[置顶]</span>
        IdentityServer4实现.Net Core API接口权限认证(快速入门)
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：什么是IdentityServer4 官方解释：IdentityServer4是基于ASP.NET Core实现的认证和授权框架，是对OpenID Connect和OAuth 2.0协议的实现。 通俗来讲，就是服务端对需要认证授权的资源（客户端请求资源）在外层使用IdentityServer4框架进        <a href="https://www.cnblogs.com/chenxf1117/p/12542479.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-03-25 09:55
跳跃的键盘手
<span data-post-id="12542479" class="post-view-count">阅读(1889)</span> 
<span data-post-id="12542479" class="post-comment-count">评论(3)</span> 
<span data-post-id="12542479" class="post-digg-count">推荐(5)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12542479" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/chenxf1117/archive/2021/05/06.html">2021年5月6日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/chenxf1117/p/14735393.html">
    <span>
        简单理解IOC控制反转和DI依赖注入
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：用过.net core框架的同学都知道，框架默认支持“构造函数”注入引用对象的方式。使用.net core框架也有一段时间了，最近去了解了一下到底什么是“依赖注入”，而往往谈到依赖注入，必然绕不开“控制反转”。 网上对它们也是众说纷纭，今天基于自己的理解，和大家简单交流下。 “控制反转”（Inver        <a href="https://www.cnblogs.com/chenxf1117/p/14735393.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2021-05-06 15:33
跳跃的键盘手
<span data-post-id="14735393" class="post-view-count">阅读(8)</span> 
<span data-post-id="14735393" class="post-comment-count">评论(0)</span> 
<span data-post-id="14735393" class="post-digg-count">推荐(0)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=14735393" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/chenxf1117/archive/2021/03/25.html">2021年3月25日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/chenxf1117/p/14558510.html">
    <span>
        深入了解身份认证和授权机制，看看API请求到底发生了什么？
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：前段时间写了一篇基于.NetCore环境使用IdentityServer4为API接口鉴权的文章，更多的是从快速上手的角度描述了IdentityServer4的使用。后续使用过程中，自己有了一些其他想法和困惑，于是便进行一番探索，在这里记录分享一下。 本文主要和大家认识下Client获取到Token        <a href="https://www.cnblogs.com/chenxf1117/p/14558510.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2021-03-25 13:10
跳跃的键盘手
<span data-post-id="14558510" class="post-view-count">阅读(92)</span> 
<span data-post-id="14558510" class="post-comment-count">评论(0)</span> 
<span data-post-id="14558510" class="post-digg-count">推荐(1)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=14558510" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/chenxf1117/archive/2021/02/26.html">2021年2月26日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/chenxf1117/p/14416365.html">
    <span>
        资源授权？对OAuth2.0的一次重新认识的过程
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：什么是OAuth？ OAuth一个开放的授权标准，允许用户在不提供关键信息（如账号，密码）给第三方应用的前提下，让第三方应用去访问用户在某网站上的资源（如头像，用户昵称等）。 OAuth分为OAuth1.0和OAuth2.0两个版本，后来随着OAuth2.0被使用的越来越广泛，OAuth1.0逐渐退        <a href="https://www.cnblogs.com/chenxf1117/p/14416365.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2021-02-26 16:05
跳跃的键盘手
<span data-post-id="14416365" class="post-view-count">阅读(414)</span> 
<span data-post-id="14416365" class="post-comment-count">评论(2)</span> 
<span data-post-id="14416365" class="post-digg-count">推荐(3)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=14416365" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/chenxf1117/archive/2021/02/08.html">2021年2月8日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/chenxf1117/p/14378153.html">
    <span>
        .NetCore快速上手Consul，留给自己一点思考的空间
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：互联网热潮下，“微服务”技术架构成为了一种高大上的技术，其顾名思义就是将传统的大的业务服务拆分成独立的小服务，当拆分的服务慢慢多起来的时候，我们会发现服务地址很难管理，传统的方式一般会通过配置文件或者数据库存储，这种手动的维护的方式显然不够灵活，如果某个服务挂了，系统得不到及时的通知，只能等维护人员        <a href="https://www.cnblogs.com/chenxf1117/p/14378153.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2021-02-08 13:54
跳跃的键盘手
<span data-post-id="14378153" class="post-view-count">阅读(485)</span> 
<span data-post-id="14378153" class="post-comment-count">评论(0)</span> 
<span data-post-id="14378153" class="post-digg-count">推荐(3)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=14378153" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/chenxf1117/archive/2021/01/13.html">2021年1月13日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/chenxf1117/p/14268707.html">
    <span>
        值得推荐的C#不同版本语言特性
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：C#语言在不断地版本升级中，为我们提供了很多新的语言特性。其中，有很多使用的语言特性，我觉得在实际开发中用起来很方便，能够简化我们的代码，增强可读性，提高开发效率。 小编不才，在这里给大家整理了一些实际开发中用起来感觉不错的C#语言特性。 C# 3.01.类型推断 var在申明变量的时候，我们可以不        <a href="https://www.cnblogs.com/chenxf1117/p/14268707.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2021-01-13 15:34
跳跃的键盘手
<span data-post-id="14268707" class="post-view-count">阅读(646)</span> 
<span data-post-id="14268707" class="post-comment-count">评论(0)</span> 
<span data-post-id="14268707" class="post-digg-count">推荐(9)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=14268707" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/chenxf1117/archive/2020/12/08.html">2020年12月8日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/chenxf1117/p/14105319.html">
    <span>
        C#中的Action和Func委托
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：前言 最近在阅读某开源框架源码的时候，发现作者在其中运用了很多Action委托和Func委托，虽然我之前在项目中也有一些对委托的实操，但还是免不了长时间的不用，当初消化的一些委托基础都遗忘了。。。索性，趁热打铁，借助这次分享的机会，也帮自己重新巩固下.Net中关于委托的一些基础用法。 直奔主题 从.        <a href="https://www.cnblogs.com/chenxf1117/p/14105319.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-12-08 19:59
跳跃的键盘手
<span data-post-id="14105319" class="post-view-count">阅读(438)</span> 
<span data-post-id="14105319" class="post-comment-count">评论(2)</span> 
<span data-post-id="14105319" class="post-digg-count">推荐(2)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=14105319" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/chenxf1117/archive/2020/12/07.html">2020年12月7日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/chenxf1117/p/14098260.html">
    <span>
        Asp.NetCore之AutoMapper进阶篇
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：应用场景 在上一篇文章——Asp.NetCore之AutoMapper基础篇中我们简单介绍了一些AutoMapper的基础用法以及如何在.NetCore中实现快速开发。我相信用过AutoMapper实现模型映射之后，许多人会和我当初一样有一种淡淡的忧愁，每次实现自定义映射都需要手写映射规则，形如：         <a href="https://www.cnblogs.com/chenxf1117/p/14098260.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-12-07 19:58
跳跃的键盘手
<span data-post-id="14098260" class="post-view-count">阅读(566)</span> 
<span data-post-id="14098260" class="post-comment-count">评论(2)</span> 
<span data-post-id="14098260" class="post-digg-count">推荐(6)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=14098260" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/chenxf1117/archive/2020/12/03.html">2020年12月3日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/chenxf1117/p/14069111.html">
    <span>
        Asp.NetCore之AutoMapper基础篇
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：应用场景 现在由于前后端技术的分离，后端程序员在使用ORM框架开发后台API接口的时候，往往会将数据库的“数据模型”直接提供给前端。而大多数时候，可能这些数据并不能够满足前端展示的需求，有时候可能需要在“数据模型”的基础上，加几个字段或者改几个字段展示名称或者字段展示风格，以满足前端“视图模型”的需        <a href="https://www.cnblogs.com/chenxf1117/p/14069111.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-12-03 19:51
跳跃的键盘手
<span data-post-id="14069111" class="post-view-count">阅读(528)</span> 
<span data-post-id="14069111" class="post-comment-count">评论(1)</span> 
<span data-post-id="14069111" class="post-digg-count">推荐(5)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=14069111" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/chenxf1117/archive/2020/10/22.html">2020年10月22日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/chenxf1117/p/13853651.html">
    <span>
        Docker结合.Net Core初步使用
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：Docker是一项比较流行的容器化技术，可以让开发者将应用以及应用依赖的环境，依赖包一起打包到容器中，然后部署容器到生产环境就可以了，解决了应用程序部署到不同服务器环境带来的问题（很多开发人员都遇到过应用程序在自己本地服务器跑的好好的，部署到生产环境就运行不起来，各种奇葩的异常），实现了“一次构建，        <a href="https://www.cnblogs.com/chenxf1117/p/13853651.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-10-22 17:15
跳跃的键盘手
<span data-post-id="13853651" class="post-view-count">阅读(799)</span> 
<span data-post-id="13853651" class="post-comment-count">评论(0)</span> 
<span data-post-id="13853651" class="post-digg-count">推荐(7)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=13853651" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/chenxf1117/archive/2020/10/12.html">2020年10月12日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/chenxf1117/p/13750784.html">
    <span>
        EntityFramwork基础用法
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：一、EntityFramework(简称“EF”)是什么？ 在.NET3.5之前，我们经常编写ADO.NET代码或通过封装好的数据库访问层来与数据库进行交互，进行CRUD操作。这种模式下，我们往往需要手写大量的SQL语句，不但麻烦而且容易出错。在这种背景下，后来微软发布了EntityFramewor        <a href="https://www.cnblogs.com/chenxf1117/p/13750784.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-10-12 17:01
跳跃的键盘手
<span data-post-id="13750784" class="post-view-count">阅读(118)</span> 
<span data-post-id="13750784" class="post-comment-count">评论(0)</span> 
<span data-post-id="13750784" class="post-digg-count">推荐(1)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=13750784" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>



<div class="topicListFooter">
    <div id="nav_next_page">
        
    <a href="https://www.cnblogs.com/chenxf1117/default.html?page=2">
        下一页
    </a>

    </div>    
</div>






<script>
    updatePostStats(
        $(".post-view-count").map(function () { return this.dataset.postId }).get(),
        function(id, count) { $(".post-view-count[data-post-id=" + id + "]").text("阅读(" + count + ")") },
        function(id, count) { $(".post-comment-count[data-post-id=" + id + "]").text("评论(" + count + ")") },
        function(id, count) { $(".post-digg-count[data-post-id=" + id + "]").text("推荐(" + count + ")") });
</script>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->
	<div id="sideBar">
		<div id="sideBarMain">
			<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>
<div id="sidebar_c3"></div>
			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2021 跳跃的键盘手
<br /><span id="poweredby">Powered by .NET 5.0 on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    

    <input type="hidden" id="antiforgery_token" value="CfDJ8L-rpLgFVEJMgssCVvNUAjusV5-algaV6rRXWgk1jYqvndkhV7-wamtYWYgYfsYNzJURo1HNLnPe1ZgM80TSYw_kkVSAFKyI72MNW4VByrbXV_1bN-vngxx7yuJReQNgF3KBkoZ4rGRsQwm41I7D24A" />
</body>
</html>
