<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin-when-crossorigin" />
    
    
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>Agile.Zhou - 博客园</title>
    <link id="favicon" rel="shortcut icon" href="//common.cnblogs.com/favicon.svg" type="image/svg+xml" />
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=zS6-e1bxywlu3kpHvpr1J6MySwya3ztFtEnS7RYQ0Fk" />
    <link id="MainCss" rel="stylesheet" href="/skins/codinglife/bundle-codinglife.min.css?v=2uJkpdACLVfstRQ7zeCFK19brTwKuDEaNBLgKz9nm3A" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/codinglife/bundle-codinglife-mobile.min.css?v=DwDRKMd1bmjnJZ4iQqrTCO9QLlYb6OZaUAzHoHIIihg" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/kklldog/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/kklldog/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/kklldog/wlwmanifest.xml" />
    <script>
        var currentBlogId = 39765;
        var currentBlogApp = 'kklldog';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var isBlogOwner = false;
        var skinName = 'CodingLife';
        var visitorUserId = '';
    </script>
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=2Mic1VLeHXarpdzASbXqFMIMVLEBiWXNO5yiTHUcmhw"></script>
    
    
    
</head>
<body class="has-navbar">
    <a name="top"></a>
    <div id="top_nav" class="navbar forpc">
        <nav id="nav_main" class="navbar-main">
            <ul id="nav_left" class="navbar-list navbar-left">
                <li class="navbar-branding"><a href="https://www.cnblogs.com/" title="开发者的网上家园"><img src="/images/logo.svg?v=R9M0WmLAIPVydmdzE2keuvnjl-bPR7_35oHqtiBzGsM" alt="博客园Logo" /></a></li>
                <li><a href="/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-sitehome')">首页</a></li>
                <li><a href="https://news.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-news')">新闻</a></li>
                <li><a href="https://q.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-q')">博问</a></li>
                <li><a id="nav_brandzone" href="https://brands.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-brands')">专区</a></li>
                <li><a href="https://ing.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-ing')">闪存</a></li>
                <li><a href="https://edu.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-edu')">班级</a></li>
            </ul>
            <ul id="nav_right" class="navbar-list navbar-right">
                <li>
                    <form id="zzk_search" class="navbar-search" action="https://zzk.cnblogs.com/s" method="get">
                        <input name="w" id="zzk_search_input" placeholder="代码改变世界" type="text" tabindex="3" />
                        <button type="submit" id="zzk_search_button">
                            <img src="/images/aggsite/search.svg" alt="搜索" />
                        </button>
                    </form>
                </li>
                <li id="navbar_login_status" class="navbar-list">
                    <a class="navbar-user-info navbar-blog" href="https://i.cnblogs.com/EditPosts.aspx?opt=1" alt="写随笔" title="写随笔">
                        <img id="new_post_icon" class="navbar-icon" src="/images/aggsite/newpost.svg" alt="写随笔" />
                    </a>
                    <a id="navblog-myblog-icon" class="navbar-user-info navbar-blog" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx" alt="我的博客" title="我的博客">
                        <img id="myblog_icon" class="navbar-icon" src="/images/aggsite/myblog.svg" alt="我的博客" />
                    </a>
                    <a class="navbar-user-info navbar-message navbar-icon-wrapper" href="https://msg.cnblogs.com/" alt="短消息" title="短消息">
                        <img id="msg_icon" class="navbar-icon" src="/images/aggsite/message.svg?v=J0WS2P2iPgaIVgXxcAhliw4AFZIpaTWxtdoNAv9eiCA" alt="短消息" />
                        <span id="msg_count" style="display: none"></span>
                    </a>
                    <div id="user_info" class="navbar-user-info dropdown">
                        <a class="dropdown-button" href="https://home.cnblogs.com/">
                            <img id="user_icon" class="navbar-avatar" src="/images/aggsite/avatar-default.svg" alt="用户头像" />
                        </a>
                        <div class="dropdown-menu">
                            <a id="navblog-myblog-text" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx">我的博客</a>
                            <a href="https://home.cnblogs.com/">我的园子</a>
                            <a href="https://account.cnblogs.com/settings/account">账号设置</a>
                            <a href="javascript:void(0)" id="navbar_lite_mode_toggle" title="简洁模式会使用简洁款皮肤显示所有博客">
    简洁模式 <img id="navbar_lite_mode_on" src="/images/lite-mode-check.svg" class="hide" /><span id="navbar_lite_mode_spinner" class="hide">...</span>
</a>
                            <a href="javascript:void(0)" onclick="account.logout();">退出登录</a>
                        </div>
                    </div>
                    <a class="navbar-anonymous" href="https://account.cnblogs.com/signup/">注册</a>
                    <a class="navbar-anonymous" href="javascript:void(0);" onclick="account.login()">登录</a>
                </li>
            </ul>
        </nav>
    </div>

    
    <!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/kklldog/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/kklldog/">菜鸟耕地</a>
</h1>
<h2>Agile.Zhou's study corner</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/kklldog/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/Agile.Zhou">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="javascript:void(0)" data-rss="https://www.cnblogs.com/kklldog/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			<div id="blog_stats_place_holder"><script>loadBlogStats();</script></div>
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->
<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		





		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/kklldog/archive/2020/08/30.html">2020年8月30日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/kklldog/p/should-we-need-jwt-always.html">
    <span>
            <span>[置顶]</span>
        我们真的需要JWT吗？
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：JWT（JSON Web Token）是目前最流行的认证方案之一。博客园、各种技术公众号隔三差五就会推一篇JWT相关的文章，真的多如牛毛。但我对JWT有点困惑，今天写出来跟大家探讨探讨，不要喷哈。 JWT原理 本文默认读者已经对JWT有所了解，下面不再详细介绍JWT，只简单提一下。 JWT全称JSO        <a href="https://www.cnblogs.com/kklldog/p/should-we-need-jwt-always.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-08-30 23:52
Agile.Zhou
<span data-post-id="13587348" class="post-view-count">阅读(4522)</span> 
<span data-post-id="13587348" class="post-comment-count">评论(93)</span> 
<span data-post-id="13587348" class="post-digg-count">推荐(26)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=13587348" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/kklldog/archive/2020/06/29.html">2020年6月29日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/kklldog/p/agile-config.html">
    <span>
            <span>[置顶]</span>
        造轮子-AgileConfig基于.NetCore的一个轻量级配置中心
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：微服务确实是行业的一个趋势，我自己也在把一些项目往微服务架构迁移。玩微服务架构配置中心是一个绕不过去的东西，有很多大牌的可以选，比如spring-cloud-config，apoll，disconf等等。而我为什么还要造一个轮子呢？一来这些都不是.net实现的，我就想试试用.net core实现一个        <a href="https://www.cnblogs.com/kklldog/p/agile-config.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-06-29 16:02
Agile.Zhou
<span data-post-id="13208439" class="post-view-count">阅读(4262)</span> 
<span data-post-id="13208439" class="post-comment-count">评论(79)</span> 
<span data-post-id="13208439" class="post-digg-count">推荐(52)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=13208439" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/kklldog/archive/2020/05/09.html">2020年5月9日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/kklldog/p/try-blazorwebassembly.html">
    <span>
            <span>[置顶]</span>
        ASP.NET Core Blazor 初探之 Blazor WebAssembly
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：最近Blazor热度很高，传说马上就要发布正式版了，做为微软脑残粉，赶紧也来凑个热闹，学习一下。        <a href="https://www.cnblogs.com/kklldog/p/try-blazorwebassembly.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-05-09 00:18
Agile.Zhou
<span data-post-id="12854010" class="post-view-count">阅读(4882)</span> 
<span data-post-id="12854010" class="post-comment-count">评论(12)</span> 
<span data-post-id="12854010" class="post-digg-count">推荐(20)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12854010" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/kklldog/archive/2020/01/13.html">2020年1月13日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/kklldog/p/agilehttp.html">
    <span>
            <span>[置顶]</span>
        .Net Core - AgileHttp
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：2020年新年将至，先预祝.Net Core越来越好。 做了这么多年一线开发，经常跟Http打交道。比如调用三方的Webservice，比如集成微信支付的时候服务端发起Prepay支付。特别是现在分布式、微服务大行其道，服务间通讯都离不开http调用。 多年前也造过几个http client的小轮子        <a href="https://www.cnblogs.com/kklldog/p/agilehttp.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-01-13 01:15
Agile.Zhou
<span data-post-id="12185464" class="post-view-count">阅读(1496)</span> 
<span data-post-id="12185464" class="post-comment-count">评论(9)</span> 
<span data-post-id="12185464" class="post-digg-count">推荐(24)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12185464" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/kklldog/archive/2018/10/22.html">2018年10月22日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/kklldog/p/agileaerver.html">
    <span>
            <span>[置顶]</span>
        AServer - 基于Asp.net core Kestrel的超迷你http服务器
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：AServer是基于ASP.NET Core Kestrel封装的一个超迷你http服务器。它可以集成进你的Core程序里，用来快速的响应Http请求，而不需要集成整个ASP.NET Core MVC 框架。 一：什么是ASever？ AServer就像它的名字一样，Just a server，它的        <a href="https://www.cnblogs.com/kklldog/p/agileaerver.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2018-10-22 09:54
Agile.Zhou
<span data-post-id="9828546" class="post-view-count">阅读(3572)</span> 
<span data-post-id="9828546" class="post-comment-count">评论(3)</span> 
<span data-post-id="9828546" class="post-digg-count">推荐(8)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=9828546" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/kklldog/archive/2016/09/22.html">2016年9月22日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/kklldog/p/webapi-signature.html">
    <span>
            <span>[置顶]</span>
        使用签名来保证ASP.NET MVC OR WEBAPI的接口安全
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：当我们开发一款App的时候，App需要跟后台服务进行通信获取或者提交数据。如果我们没有完善的安全机制则很容易被别用心的人伪造请求而篡改数据。 所以我们需要使用某种安全机制来保证请求的合法。现在最常用的办法是给每个http请求添加一个签名，服务端来验证签名的合法性，如果签名合法则执行响应的操作，如果签        <a href="https://www.cnblogs.com/kklldog/p/webapi-signature.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2016-09-22 01:23
Agile.Zhou
<span data-post-id="5894742" class="post-view-count">阅读(12325)</span> 
<span data-post-id="5894742" class="post-comment-count">评论(69)</span> 
<span data-post-id="5894742" class="post-digg-count">推荐(25)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=5894742" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/kklldog/archive/2016/07/08.html">2016年7月8日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/kklldog/p/vscodecsharpext.html">
    <span>
            <span>[置顶]</span>
        在Mac上使用Visual Studio Code开发/调试.NET Core代码
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：.Net Core 1.0终于发布了，Core的一大卖点就是跨平台。这个跨平台不只是跨平台运行，而且可以跨平台开发。今天抽空研究了下在Mac下如何使用VS Code来开发.NET Core程序，并且调试代码。 1.安装.NET Core 在mac上打开终端： ~$ brew update ~$ br        <a href="https://www.cnblogs.com/kklldog/p/vscodecsharpext.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2016-07-08 01:40
Agile.Zhou
<span data-post-id="5652070" class="post-view-count">阅读(18918)</span> 
<span data-post-id="5652070" class="post-comment-count">评论(11)</span> 
<span data-post-id="5652070" class="post-digg-count">推荐(7)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=5652070" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/kklldog/archive/2016/01/14.html">2016年1月14日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/kklldog/p/helios_chat_room.html">
    <span>
            <span>[置顶]</span>
        .NET开源高性能Socket通信中间件Helios介绍及演示
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：一:Helios是什么 Helios是一套高性能的Socket通信中间件，使用C#编写。Helios的开发受到Netty的启发，使用非阻塞的事件驱动模型架构来实现高并发高吞吐量。Helios为我们大大的简化了Socket编程，它已经为我们处理好了高并发情况下的解包，粘包，buffer管理等等。 Gi        <a href="https://www.cnblogs.com/kklldog/p/helios_chat_room.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2016-01-14 02:17
Agile.Zhou
<span data-post-id="5129025" class="post-view-count">阅读(12301)</span> 
<span data-post-id="5129025" class="post-comment-count">评论(75)</span> 
<span data-post-id="5129025" class="post-digg-count">推荐(59)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=5129025" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/kklldog/archive/2013/10/29.html">2013年10月29日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/kklldog/p/3395641.html">
    <span>
            <span>[置顶]</span>
        IoC原理-使用反射/Emit来实现一个最简单的IoC容器
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：从Unity到Spring.Net，到Ninject，几年来陆陆续续用过几个IoC框架。虽然会用，但也没有一直仔细的研究过IoC实现的过程。最近花了点时间，下了Ninject的源码，研究了一番，颇有收获。下面我要实现一个最最简单的IoC容器，以让跟我一样的小菜能更好的理解IoC框架的到底为我们做了什        <a href="https://www.cnblogs.com/kklldog/p/3395641.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2013-10-29 23:46
Agile.Zhou
<span data-post-id="3395641" class="post-view-count">阅读(4678)</span> 
<span data-post-id="3395641" class="post-comment-count">评论(8)</span> 
<span data-post-id="3395641" class="post-digg-count">推荐(12)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=3395641" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/kklldog/archive/2021/05/06.html">2021年5月6日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/kklldog/p/azure-container-register.html">
    <span>
        使用 Azure Container Registry 储存镜像
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：Azure Container Registry（容器注册表）是基于 Docker Registry 2.0规范的托管专用 Docker 注册表服务。 可以创建和维护 Azure 容器注册表来存储与管理专用的 Docker 容器映像和相关项目。 Azure Container Registry 类似        <a href="https://www.cnblogs.com/kklldog/p/azure-container-register.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2021-05-06 23:58
Agile.Zhou
<span data-post-id="14737450" class="post-view-count">阅读(36)</span> 
<span data-post-id="14737450" class="post-comment-count">评论(0)</span> 
<span data-post-id="14737450" class="post-digg-count">推荐(0)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=14737450" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/kklldog/archive/2021/04/27.html">2021年4月27日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/kklldog/p/netcore-with-kafka.html">
    <span>
        .Net Core 集成 Kafka
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：最近维护的一个系统并发有点高，所以想引入一个消息队列来进行削峰。考察了一些产品，最终决定使用kafka来当做消息队列。以下是关于kafka的一些知识的整理笔记。 kafka kafka 是分布式流式平台。它由linkedin开发，后贡献给了Apache开源组织并成为顶级开源项目。它可以应用在高并发场        <a href="https://www.cnblogs.com/kklldog/p/netcore-with-kafka.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2021-04-27 10:06
Agile.Zhou
<span data-post-id="14703212" class="post-view-count">阅读(2332)</span> 
<span data-post-id="14703212" class="post-comment-count">评论(18)</span> 
<span data-post-id="14703212" class="post-digg-count">推荐(14)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=14703212" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/kklldog/archive/2021/04/22.html">2021年4月22日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/kklldog/p/azure-data-studio.html">
    <span>
        Azure data studio 跨平台数据库管理工具试用
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：最近折腾 azure sql database 的时候发现了微软的一款新的数据库管理工具： azure data studio。从名字上看 azure data studio 好像是专门为 azure 开发的，其实并不是这样的 。它同样支持对传统sql server的查询于管理。 azure dat        <a href="https://www.cnblogs.com/kklldog/p/azure-data-studio.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2021-04-22 10:42
Agile.Zhou
<span data-post-id="14688411" class="post-view-count">阅读(1178)</span> 
<span data-post-id="14688411" class="post-comment-count">评论(5)</span> 
<span data-post-id="14688411" class="post-digg-count">推荐(9)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=14688411" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/kklldog/archive/2021/04/14.html">2021年4月14日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/kklldog/p/agileconfig-120.html">
    <span>
        AgileConfig - 轻量级配置中心1.2.0发布，全新的UI✨✨✨
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：AgileConfig自发布以来有个“大问题”-UI太丑。因为当初这个项目是给自己用的，连UI界面都没有，全靠手动在数据库里改配置。后来匆匆忙忙使用bootstrap3简单的码了一些界面就发布出来了，易用性上也做的不够好。对此我一直耿耿于怀。终于在过年期间动手翻新UI。 对于一个后端程序员，标准的直        <a href="https://www.cnblogs.com/kklldog/p/agileconfig-120.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2021-04-14 14:19
Agile.Zhou
<span data-post-id="14657666" class="post-view-count">阅读(1781)</span> 
<span data-post-id="14657666" class="post-comment-count">评论(14)</span> 
<span data-post-id="14657666" class="post-digg-count">推荐(14)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=14657666" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/kklldog/archive/2021/04/02.html">2021年4月2日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/kklldog/p/github-actions-artifact.html">
    <span>
        使用 Github Actions artifact 在 workflow job 之间共享数据
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：AgileConfig 在使用 react 编写UI后，变成了一个彻彻底底的前后端分离的项目，上一次解决了把react spa 跟asp.net core 站点集成起来 asp.net core 集成 react spa。本来我每次提交代码的时候都需要手动运行npm run build,然后把dis        <a href="https://www.cnblogs.com/kklldog/p/github-actions-artifact.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2021-04-02 16:19
Agile.Zhou
<span data-post-id="14611247" class="post-view-count">阅读(754)</span> 
<span data-post-id="14611247" class="post-comment-count">评论(2)</span> 
<span data-post-id="14611247" class="post-digg-count">推荐(7)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=14611247" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/kklldog/archive/2021/03/29.html">2021年3月29日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/kklldog/p/netcore-docker-image-size.html">
    <span>
        优化 ASP.NET Core Docker 镜像的大小
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：在这容器化的世界里，我们已经很少直接通过文件发布来运行asp.net core程序了。现在大多数情况下，我们都会使用docker来运行程序。在使用docker之前，我们往往需要打包我们的应用程序。asp.net core程序的镜像打包，网上有很多教程，其中大多数是使用sdk这个镜像来直接打包。打出来        <a href="https://www.cnblogs.com/kklldog/p/netcore-docker-image-size.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2021-03-29 12:50
Agile.Zhou
<span data-post-id="14591866" class="post-view-count">阅读(967)</span> 
<span data-post-id="14591866" class="post-comment-count">评论(3)</span> 
<span data-post-id="14591866" class="post-digg-count">推荐(8)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=14591866" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/kklldog/archive/2021/03/15.html">2021年3月15日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/kklldog/p/netcore-embed-react.html">
    <span>
        ASP.NET Core 集成  React SPA 应用
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：AgileConfig的UI使用react重写快完成了。上次搞定了基于jwt的登录模式（AntDesign Pro + .NET Core 实现基于JWT的登录认证），但是还有点问题。现在使用react重写后，agileconfig成了个确确实实的前后端分离项目。那么其实部署的话要分2个站点部署，把        <a href="https://www.cnblogs.com/kklldog/p/netcore-embed-react.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2021-03-15 13:53
Agile.Zhou
<span data-post-id="14537189" class="post-view-count">阅读(915)</span> 
<span data-post-id="14537189" class="post-comment-count">评论(15)</span> 
<span data-post-id="14537189" class="post-digg-count">推荐(8)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=14537189" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/kklldog/archive/2021/03/04.html">2021年3月4日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/kklldog/p/ant-design-pro-with-netcore.html">
    <span>
        AntDesign Pro + .NET Core 实现基于JWT的登录认证
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：很多同学说AgileConfig的UI实在是太丑了。我想想也是的，本来这个项目是我自己使用的，一开始甚至连UI都没有，全靠手动在数据库里修改数据。后来加上了UI也是使用了老掉牙的bootstrap3做为基础样式。前台框架也是使用了angularjs，同样是老掉牙的东西。过年期间终于下决心翻新Agil        <a href="https://www.cnblogs.com/kklldog/p/ant-design-pro-with-netcore.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2021-03-04 00:51
Agile.Zhou
<span data-post-id="14477951" class="post-view-count">阅读(2899)</span> 
<span data-post-id="14477951" class="post-comment-count">评论(14)</span> 
<span data-post-id="14477951" class="post-digg-count">推荐(21)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=14477951" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/kklldog/archive/2021/02/18.html">2021年2月18日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/kklldog/p/14403028.html">
    <span>
        使用SQL-Server分区表功能提高数据库的读写性能
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：首先祝大家新年快乐，身体健康，万事如意。 一般来说一个系统最先出现瓶颈的点很可能是数据库。比如我们的生产系统并发量很高在跑一段时间后，数据库中某些表的数据量会越来越大。海量的数据会严重影响数据库的读写性能。 这个时候我们会开始优化系统，一般会经过这么几个过程： 找出SQL慢查询，针对该SQL进行优化        <a href="https://www.cnblogs.com/kklldog/p/14403028.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2021-02-18 09:58
Agile.Zhou
<span data-post-id="14403028" class="post-view-count">阅读(2925)</span> 
<span data-post-id="14403028" class="post-comment-count">评论(25)</span> 
<span data-post-id="14403028" class="post-digg-count">推荐(23)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=14403028" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/kklldog/archive/2021/01/18.html">2021年1月18日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/kklldog/p/agileconfig-restful-api.html">
    <span>
        AgileConfig - RESTful API 介绍
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：AgileConfig AgileConfig是一个基于.net core开发的轻量级配置中心。 AgileConfig秉承轻量化的特点，部署简单、配置简单、使用简单、学习简单，它只提取了必要的一些功能，并没有像Apollo那样复杂且庞大。但是它的功能也已经足够你替换webconfig，appset        <a href="https://www.cnblogs.com/kklldog/p/agileconfig-restful-api.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2021-01-18 20:23
Agile.Zhou
<span data-post-id="14294948" class="post-view-count">阅读(322)</span> 
<span data-post-id="14294948" class="post-comment-count">评论(0)</span> 
<span data-post-id="14294948" class="post-digg-count">推荐(1)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=14294948" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>



<div class="topicListFooter">
    <div id="nav_next_page">
        
    <a href="https://www.cnblogs.com/kklldog/default.html?page=2">
        下一页
    </a>

    </div>    
</div>






<script>
    updatePostStats(
        $(".post-view-count").map(function () { return this.dataset.postId }).get(),
        function(id, count) { $(".post-view-count[data-post-id=" + id + "]").text("阅读(" + count + ")") },
        function(id, count) { $(".post-comment-count[data-post-id=" + id + "]").text("评论(" + count + ")") },
        function(id, count) { $(".post-digg-count[data-post-id=" + id + "]").text("推荐(" + count + ")") });
</script>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->
	<div id="sideBar">
		<div id="sideBarMain">
			<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>
<div id="sidebar_c3"></div>
			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2021 Agile.Zhou
<br /><span id="poweredby">Powered by .NET 5.0 on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    

    <input type="hidden" id="antiforgery_token" value="CfDJ8L-rpLgFVEJMgssCVvNUAjugwcm6wuE4d_zH0DFkyBWzbc1ivRdba6RS8evJncQKp8Y2I1UcpfF_qg19ZUCEkueOXtTVfjENsqPyOB6qdIjrA9tC1SXxoTcTMM_zPDdvN_iyCLjcGrxqagUqyGmKukA" />
</body>
</html>
